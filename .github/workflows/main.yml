name: FastAPI CI/CD

on:
  #Trigger the workflow on push
  push:
    #Push events on the branch
    branches: [main, development, release/**]
jobs:
  CI:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
    steps:
      #checkout the repository so that our workflow can access it
      - uses: actions/checkout@v2
      - name: Set up Python  ${{ matrix.python-version }}
        # this action sets up the python environment for uses in actions
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #install python virtual env
      - name: install python virtual env
        run: pip3 install virtualenv
      - name: virtual environment
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv #what we cache the virtual environment
          # the cache key depends on the requirements.txt
          key: ${{runner.os}}-venv-${{hashFiles('**/requirements*.txt')}}
          restore-keys: /
            ${{runner.os}}-venv-
      # Step-4 Build a Virtual ENV, but only if it doesn't already exist
      - name: Activate Virtual ENV
        run: python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Run Tests
        # Note that you have to activate the virtualenv in every step
        # because GitHub actions doesn't preserve the environment
        run: . venv/bin/activate && pytest
      - name: Create archive of dependencies
        run: |
          cd ./venv/lib/python3.8/site-packages
          zip -r9 ../../../../api.zip .
      - name: Add API files to Zip file
        run: cd ./api && zip -g ../api.zip -r .
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip
